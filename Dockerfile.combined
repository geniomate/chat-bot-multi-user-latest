# Combined Dockerfile for frontend and backend       
     
     # Use Nginx as the base image
     FROM nginx:alpine
     
     # Install Python, pip, and virtualenv
     RUN apk add --no-cache python3 py3-pip py3-virtualenv
     
    # Create directories
   RUN mkdir -p /app/frontend /app/backend
 
    # Copy backend requirements and install dependencies in a virtual environment
   COPY ./backend/requirements.txt /app/backend/
   RUN python3 -m venv /app/venv
   RUN /app/venv/bin/pip install --no-cache-dir -r /app/backend/requirements.txt
    
    # Copy backend source code
    COPY ./backend /app/backend/
    
    # Copy custom nginx configuration
    COPY ./nginx.conf /etc/nginx/nginx.conf
    
    # Make start script executable
    COPY ./start.sh /start.sh
    RUN chmod +x /start.sh
    
    # Install node and pnpm
    RUN apk add --no-cache nodejs npm
    RUN npm install -g pnpm
    
    # Set working directory for frontend
    WORKDIR /app/frontend
    
    # Copy frontend package files
   COPY package.json ./
    COPY pnpm-lock.yaml* ./
    
    # Install frontend dependencies
    RUN pnpm install --no-frozen-lockfile
    
    # Copy frontend source code
    COPY index.html ./
    COPY index.css ./
    COPY index.tsx ./
    COPY tsconfig.json ./
    COPY vite.config.ts ./
    COPY types.ts ./
    COPY .env* ./
    
    # Copy frontend source directories
    COPY components ./components/
    COPY src ./src/
    
    # Build the frontend application
    RUN pnpm run build
    
    # Copy the built frontend to Nginx directory
    RUN cp -r dist/* /usr/share/nginx/html/
    
    # Set working directory back to root
    WORKDIR /
    
    # Expose port
    EXPOSE 80
    
    # Start both Nginx and the backend application
    CMD ["/start.sh"]